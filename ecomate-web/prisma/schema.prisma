// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    COSTUMER
    ADMIN
}

enum Gender {
    MALE
    FEMALE
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    hashPassword  String?
    imageUrl      String?

    role UserRole @default(COSTUMER)

    accounts    Account[]
    sessions    Session[]
    NewsComment NewsComment[]
    Cart        Cart[]
    Item        Item[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// News Feature Schemas
model News {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String?
    imageUrl    String?
    content     String?
    isPublished Boolean       @default(false)
    NewsComment NewsComment[]
}

model NewsComment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    newsId String
    userId String

    news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Flashcard Feature Schemas
model Flashcard {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String
    imageUrl    String?
    isPublished Boolean @default(false)
}

// Carbon Footprint Calculator Schemas
model CarbonFootprintAttribute {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    unit        String
    coefficient Float
}

model CarbonFootprintFormula {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    formula     String
    unit        String
}

// Marketplace Schemas - Item list
model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?
    Item        Item[]
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    price       Float
    imageUrl    String?
    isPublished Boolean @default(false)

    categoryId String
    Category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    CartItem   CartItem[]

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Marketplace Schemas - Cart
model Cart {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    CartItem CartItem[]
}

model CartItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quantity Int

    cartId String
    Cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

    itemId String
    Item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
